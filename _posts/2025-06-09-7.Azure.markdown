---
layout: post
title:  "Azure에 대한 개요 및 정의"
date:   2025-06-09 12:20 +0900
categories: Azure CSP 
---

Azure에 대한 개요와 간단한 테넌트 구현

# Azure 기초 학습 가이드

## 목차
1. [Azure 핵심 개념](#azure-핵심-개념)
2. [Azure 스토리지](#azure-스토리지)
3. [네트워킹](#네트워킹)
4. [고가용성과 부하분산](#고가용성과-부하분산)
5. [Azure 관리 도구](#azure-관리-도구)
6. [컴퓨팅 서비스](#컴퓨팅-서비스)
7. [트래픽 관리](#트래픽-관리)

---

## Azure 핵심 개념

### 서비스 vs 리소스
- **`서비스`**: 구현할 스키마, 설계도
- **`리소스`**: 스키마, 설계도로 구현한 결과물들 (실제 작업물)

### 리소스 그룹 관리
- **리소스 그룹 내 리소스 이동**: 리소스 그룹 안의 리소스들은 다른 리소스 그룹으로 이동할 수 있음
- **프로젝트 베이스 리소스 그룹 유형**
- **부서별 베이스 리소스 그룹 유형**
- 세부적인 항목은 **태그**로 조정

### Azure 인증 체계

#### Entra ID (디렉터리)
- 디렉터리 서비스
- **사용자, 그룹, 서비스 주체** 관리
- 구독으로부터 **인증 & 권한 부여**를 받아서 리소스를 사용하거나 생성
- **보안 주체**: 인증 & 권한부여가 가능한 주체

#### 구독
- Azure 계정이 액세스하는 리소스의 **논리적인 관리 단위**
- **인증 & 권한 부여** 담당
- **사용자 관리 역할**: 전역 관리자 or 사용자 관리자 권한 필요

#### 사용자 ID
- ID는 **테넌트 안에 고유**하게 존재해야 함
- 해당 ID에 권한을 설정하여 관리 가능

#### 그룹 계정 관리
- 그룹 계정을 만들고, **소유자와 구성원** 설정 가능
- **소유자**는 권한이 없더라도 구성원을 추가 설정 가능

### Azure 권한 관리

#### Azure RBAC 역할 (Role Based Access Control)
- **Azure 리소스에 대한 액세스 관리**
- 범위는 여러 수준에서 지정 가능:
  - **관리 그룹** → **구독** → **리소스 그룹** → **리소스** 순으로 범위 지정

#### Entra ID 역할
- **Entra ID 개체에 대한 액세스 관리**
- 범위는 **테넌트 수준**

#### 관리 그룹 구조
- 부서별로 나누고, **관리 그룹별로 정책** 사용 가능
- 관리 그룹 하위에 구독을 만들어서 생성 가능
- **상속 구조**: 관리 그룹 → 구독 → IAM → 리소스 순서로 상위의 역할을 하위에 상속

---

## Azure 스토리지

### 데이터 유형 분류

#### 비정형 데이터 (비구조적 데이터)
- **Blob** (Binary Large Object)
- 스키마, 관계를 설립할 수 없는 데이터

#### 반정형 데이터 (반구조적 데이터)
- **JSON**으로 만들어진 키 정형 데이터, **XML**
- 스키마는 존재하지만, 따라가지 않는 데이터

#### 정형 데이터 (구조적 데이터)
- 테이블 형태의 구조화된 데이터

![Azure 데이터 유형](/assets/Images/7.Azure/image.png)

### Azure 스토리지 특징

![Azure 스토리지 특징](/assets/Images/7.Azure/image%201.png)

- **내구성**: 99.999999999% (11 9's) 내구성
- **보안**: 기본 암호화 및 세밀한 액세스 제어
- **확장성**: 거의 무제한 확장 가능
- **관리**: 완전 관리형 서비스

### Azure 스토리지 서비스 개요

- **Azure 스토리지 계정**: Azure 스토리지 서비스의 최상위 네임스페이스
- **스토리지 서비스 사용을 위한 인증과 권한 부여 기반**

#### 주요 스토리지 서비스

| 서비스 | 설명 |
|--------|------|
| **Azure Blob** | 확장성이 매우 뛰어난 텍스트 및 이진 데이터용 개체 저장소 |
| **Azure Files** | 클라우드 또는 온-프레미스 배포용 관리형 파일 공유 |
| **Azure Tables** | 구조적 비관계형 데이터 저장 |
| **Azure Queues** | 애플리케이션 구성 요소 간의 안정적인 메시징을 위한 메시징 저장소 |

### 스토리지 계정 성능 유형

![스토리지 성능 유형](/assets/Images/7.Azure/image%202.png)

| 성능 계층 | 설명 | 용도 |
|-----------|------|------|
| **Standard** | HDD 기반, 비용 효율적 | 일반적인 스토리지 요구사항 |
| **Premium** | SSD 기반, 고성능 | 고성능이 필요한 워크로드 |

### 스토리지 복제 유형

![스토리지 복제 유형](/assets/Images/7.Azure/image%203.png)

| 복제 유형 | 설명 | 내구성 |
|-----------|------|--------|
| **LRS** (Locally Redundant Storage) | 로컬 중복 저장소 | 99.999999999% |
| **ZRS** (Zone Redundant Storage) | 영역 중복 저장소 | 99.9999999999% |
| **GRS** (Geo Redundant Storage) | 지역 중복 저장소 | 99.99999999999999% |
| **GZRS** (Geo Zone Redundant Storage) | 지역 영역 중복 저장소 | 99.99999999999999% |

---

## 네트워킹

### 가상 네트워크 (VNet)
- **물리적인 네트워크의 논리적 표현**
- 소프트웨어로 정의한 네트워크 (SDN)
- **격리된 프라이빗 네트워크** 제공

#### 주요 개념
- **CIDR**: 가용성을 높이기 위해, 서브넷 마스크를 1의 개수로 정함
- **서브넷팅**: 서브넷의 숫자를 정하는 행위

### 서브넷의 이점

- ✅ **네트워크 성능 향상**
- ✅ **네트워크 정체 감소**
- ✅ **네트워크 보안 향상**
- ✅ **적절한 네트워크 크기 유지**
- ✅ **관리 용이**

> **주의사항**
> - 가상 네트워크 전체 주소 공간을 서브넷 주소 공간으로 사용하지 않기
> - 네트워크 보안 그룹을 사용한 트래픽 제어 고려

### NAT 게이트웨이

![NAT 게이트웨이](/assets/Images/7.Azure/image%208.png)

- NAT 게이트웨이를 통해 **나가고 들어오는 데이터는 허용**
- **외부로부터 NAT 게이트웨이로 접근하는 데이터들은 무시**
- 아웃바운드 전용 연결 제공

### VNet 피어링
- **VNet 피어링**: 두 Azure 가상 네트워크를 연결
- **전역 피어링**: 리전과 리전 간의 VNet을 연결
- **지역 피어링**: 지역 내부에서 가용 영역끼리 연결

---

## 고가용성과 부하분산

### 고가용성 가상 머신 구현 원칙

![고가용성 원칙](/assets/Images/7.Azure/image%204.png)

- **가용성 영역**: 같은 리전 내에 있는 가용 영역에서 고가용성을 보호
- **지역 쌍**: 서울, 부산 같이 리전과 리전의 Pair로 이뤄진 구조에서 고가용성을 보호 (Disaster Recovery)

### 가용성 집합

![가용성 집합](/assets/Images/7.Azure/image%205.png)

- 같은 로컬 안에서 **다른 장비에 구성**하고 연결하여 가용성을 구현
- 물리적 하드웨어 장애로부터 보호

### 업데이트 도메인과 장애 도메인

![도메인 구성](/assets/Images/7.Azure/image%206.png)

- **각 애플리케이션 계층을 나눠 가용성 집합으로 설정**
- **장애 도메인을 2개** 사용 시, 다른 장비에 구성
- 사용자가 설정 가능하지만, **VM 관리 디스크를 사용**해야 함

### 부하 분산 장치

![부하 분산 장치](/assets/Images/7.Azure/image%207.png)

| 구분 | 서비스 | 계층 | 특징 |
|------|--------|------|------|
| **Azure Load Balancer** | L4 Load Balancer | Transport Layer | IP, 포트 기반 분산 |
| **Application Gateway** | L7 Load Balancer | Application Layer | HTTP/HTTPS 기반 분산 |

#### 백엔드 풀
- 백엔드들의 **IP나 NIC로 설정** 가능

### Application Gateway (L7 Load Balancer)

![Application Gateway](/assets/Images/7.Azure/image%209.png)

- **WAF** (Web Application Firewall) 구성 가능
- HTTP/HTTPS 트래픽 라우팅
- SSL 종료 기능

#### 라우팅 방법

![라우팅 방법](/assets/Images/7.Azure/image%2010.png)

1. **경로 기반 라우팅**: 경로를 기반하여 백엔드 풀에 접근하는 방식
2. **다중 사이트 라우팅**: 사이트 주소를 통해 백엔드 풀에 접근하는 방식

#### Application Gateway 구성 요소

![Application Gateway 구성](/assets/Images/7.Azure/image%2011.png)

- **프런트엔드 IP**: 클라이언트 요청을 받는 IP
- **리스너**: 포트, 프로토콜, 호스트, IP 조합 확인
- **라우팅 규칙**: 리스너를 백엔드 풀로 라우팅
- **백엔드 풀**: 요청을 처리할 백엔드 서버 그룹

---

## Azure 관리 도구

### 관리 접근 방식

#### 명령형 (Imperative)
- **절차적으로 수행해 결과를 내는 모델**
- 도구: **Azure PowerShell**, **Azure CLI**

#### 선언적 (Declarative)
- **상태를 묘사하는 템플릿**을 만들어 템플릿이 작업을 수행해 결과를 내는 모델
- **Infrastructure as Code (IaC)**
- 도구: **Azure Resource Manager Template**, **Azure PowerShell DSC**, **Bicep**

### Azure CLI

#### CLI 구문 구성

![CLI 구문](/assets/Images/7.Azure/image%2012.png)

```bash
az [command] [subcommand] [parameters]
```

#### Azure CLI 명령어 예시

```bash
#1. 변수 정의 
$location = "koreacentral"

#2. 리소스 그룹
$rg = $(az group list --query "[?contains(name, 'hall')].name" -o tsv)

#3. 가상 네트워크 
$vnet = $(az network vnet list --query "[?contains(name, 'hall')].name" -o tsv)
$subnet = $(az network vnet subnet list -g $rg --vnet-name $vnet --query "[?contains(name, 'jarvis')].name" -o tsv)

#4. 네트워크 보안 그룹 
az network nsg create -g $rg -n nsg-vmjarvisbe -l $location

#5. 네트워크 카드 
az network nic create -g $rg --vnet-name $vnet --subnet $subnet -n nic-vmjarvisbe --network-security-group nsg-vmjarvisbe -l $location 

#6. 가상 머신 만들기 
az vm create -n vmjarvisbe -g $rg --admin-username tony --authentication-type ssh --generate-ssh-keys --image Ubuntu2204 --nics nic-vmjarvisbe --size Standard_DS1_v2

#7. SSH 키 변경 
ren $home\.ssh\id_rsa vmjarvisbe_key
```

### PowerShell

#### PowerShell 명령 기본 형식

1. **영어 문장처럼**: **동사-명사** (Verb-Noun)
   - **명사**: 대상 개체
   - **동사**: 대상 개체에 실행하는 동작
   - **매개변수와 스위치**

2. **별칭 시스템**
   - 기본 별칭과 사용자 정의 별칭
   - DOS 표준 명령도 별칭으로 제공
   - **스크립트에서 별칭 사용 금지**
   - 주요 cmdlet: `Get-Alias`, `New-Alias`, `Set-Alias`, `Export-Alias`, `Import-Alias`
   - 별칭 삭제: `Remove-Item`

> **참고**: `Get-*` 형식의 Cmdlet은 Get 생략 가능 (예: `Get-Alias` → `Alias`, `Get-Service` → `Service`)

#### PowerShell 개체

- **개체와 컬렉션**
  - **개체**: 메모리 상의 데이터 구조
  - **컬렉션**: 개체의 집합
- **개체를 다루는 작업** = 추상화 수준을 다루는 일
- **PowerShell 명령의 실행 결과** → 개체

![PowerShell 개체](/assets/Images/7.Azure/image%2013.png)

#### PowerShell 실습 예시

```powershell
# 프로세스 종료 예시
(Get-Process | Where-Object {$_.ProcessName -eq 'notepad'}).Kill()
```

- `Get-Process`로 파이프라인을 넘겨줄 때 결과물 참조: `$_` 사용
- `Get-Process` → `Where-Object`에서 필터링 → `$_.ProcessName` 중 'notepad'와 같은 프로세스 찾아서 종료

#### PowerShell 명령어 모음

```powershell
#1. 도움말
Get-Help -Name New-Alias -Detailed
Get-Help -Name New-Alias -Examples
Get-Help -Name New-Alias -Online

#2. 도움말 업데이트
Update-Help

#3. 도움말 구조 
Get-Help -Name New-Alias -Full

#4. 명령을 찾고 빠르게 익히기 
Get-Command -verb Get -noun Net*
Get-Help Get-NetIPAddress -full
Get-NetIPAddress
Get-Command -Noun Service*
Get-Command -Noun process

#5. 개체의 멤버 확인
Get-Help Get-Member
Get-Process | Get-Member
Get-Process | Get-Member -MemberType Property, Method
Get-Process | Get-Member -MemberType Properties
(Get-Process | Where-Object {$_.ProcessName -eq 'notepad'}).Kill()
Get-Command -verb out

#6. 개체 선택 
Get-Process | Select-Object -Property Name,ID,PM,VM -Last 7

#7. 표시할 사용자 속성 
Get-ChildItem -Path C:\Users\Administrator\Downloads | Select-Object -Property Name,@{n='Size(MB)';e={$PSItem.Length/1MB}}

Get-Volume | Select-Object -Property DriveLetter,Size,SizeRemaining 
Get-Volume | Select-Object -Property DriveLetter,@{n='전체 크기';e={'{0:N2} GB' -f ($PSItem.Size/1GB)}},@{n='남은 크기';e={'{0:N2} GB' -f ($PSItem.SizeRemaining/1GB)}}

#8. 개체 정렬
Get-Process | Sort-Object -Property WorkingSet -Descending

#9. 기본 필터링
Get-Service | Where-Object -Property Status -EQ Running | Select-Object -First 10

#10. 고급 필터링
Get-Service | Where-Object -FilterScript {$PSItem.Name.Length -lt 7}
Get-Service | Where-Object {$_.Name.Length -lt 7}
Get-Volume | Where-Object {$_.HealthStatus -ne 'Healthy' -or $_.SizeRemaining -lt 100MB}
```

---

## 컴퓨팅 서비스

### 컴퓨팅 서비스 선택 가이드

![컴퓨팅 서비스 선택](/assets/Images/7.Azure/image%2014.png)

### App Service

#### App Service 개요

![App Service 개요](/assets/Images/7.Azure/image%2015.png)

- **완전 관리형 PaaS** (Platform as a Service)
- 웹 애플리케이션, API, 모바일 백엔드 호스팅

#### App Service 주요 기능

![App Service 기능](/assets/Images/7.Azure/image%2016.png)

- ✅ **자동 확장**
- ✅ **CI/CD 통합**
- ✅ **SSL 지원**
- ✅ **사용자 지정 도메인**
- ✅ **인증 및 권한 부여**

#### App Service 요금제

![App Service 요금제](/assets/Images/7.Azure/image%2017.png)

| 계층 | 설명 | 특징 |
|------|------|------|
| **Free** | 무료 계층 | 제한된 리소스 |
| **Shared** | 공유 계층 | 기본 기능 |
| **Basic** | 기본 계층 | 전용 리소스 |
| **Standard** | 표준 계층 | 자동 확장, 슬롯 |
| **Premium** | 프리미엄 계층 | 고성능, 고급 기능 |

#### App Service 배포 예시

```javascript
1. 전역 검색에서 "App Services" 검색 후 [만들기]
2. [기본]
- 리소스 그룹: rg-paaslab
- 이름: web[SUFFIX]
- 게시: 코드
- 런타임 스택: .NET 6
- 운영 체제: Windows
- 지역: East US
- 플랜: asp-windows / Premium V2 P1v2
- 영역 중복: 사용

3. [배포]
GitHub Actions: 사용 안 함

4. [네트워킹]
Enable public access: 켜기
네트워크 삽입 사용: 끄기

5. [모니터링]
Application Insights: 아니오
```

![App Service 배포](/assets/Images/7.Azure/image%2018.png)

### 가상 머신 확장 집합 (VMSS)

#### 가상 머신 확장 집합 개요

![VMSS 개요](/assets/Images/7.Azure/image%2019.png)

- **동일한 VM의 그룹을 관리**
- **자동 확장 및 축소**
- **부하 분산** 지원

#### 가상 머신 확장 집합 고려 사항

![VMSS 고려사항](/assets/Images/7.Azure/image%2020.png)

- ✅ **확장성**: 수천 개의 VM까지 확장 가능
- ✅ **고가용성**: 가용성 영역 및 장애 도메인 지원
- ✅ **비용 효율성**: 필요에 따라 자동 확장/축소
- ✅ **관리 편의성**: 템플릿 기반 배포

---

## 트래픽 관리

### Azure Traffic Manager

![Traffic Manager](/assets/Images/7.Azure/image%2021.png)

- **DNS 기반 트래픽 라우팅** 서비스
- 전 세계 Azure 지역의 서비스에 트래픽을 분산

#### Azure Traffic Manager 기능

![Traffic Manager 기능](/assets/Images/7.Azure/image%2022.png)

- 🌐 **글로벌 부하 분산**
- 🔍 **상태 모니터링**
- ⚡ **자동 장애 조치**
- 📊 **성능 기반 라우팅**

#### Traffic Manager 라우팅 방법

##### 1. 성능 라우팅

![성능 라우팅](/assets/Images/7.Azure/image%2023.png)

- **가장 낮은 대기 시간**을 제공하는 엔드포인트로 트래픽 라우팅

##### 2. 지역 라우팅

![지역 라우팅](/assets/Images/7.Azure/image%2024.png)

- **지리적 위치**를 기반으로 트래픽 라우팅
- 데이터 거주 요구 사항 충족

##### 3. 가중 라우팅

![가중 라우팅](/assets/Images/7.Azure/image%2025.png)

- **가중치**를 기반으로 트래픽을 비례적으로 분산

---

## 관련 학습 자료

- [AI 개념 학습 자료](https://www.notion.so/AI-1-20dcfe7072438096a65ae821e1bd2ae5)
- [이미지와 이미지 처리](https://www.notion.so/1-20dcfe70724380b887ebf551bc2e165e)
- [자연어 처리](https://www.notion.so/1-20dcfe707243801ab457d10fa8269327)

---

## 요약

이 문서는 Azure의 기본 개념부터 고급 기능까지 포괄적으로 다루고 있습니다. 주요 학습 포인트:

1. **Azure 핵심 개념**: 서비스, 리소스, 구독, Entra ID 등의 기본 구조 이해
2. **스토리지**: 다양한 데이터 유형과 스토리지 서비스 옵션
3. **네트워킹**: VNet, 서브넷, 피어링 등의 네트워크 구성
4. **고가용성**: 가용성 집합, 부하 분산 장치를 통한 안정성 확보
5. **관리 도구**: PowerShell과 Azure CLI를 활용한 효율적 관리
6. **컴퓨팅 서비스**: App Service, VMSS 등의 컴퓨팅 옵션
7. **트래픽 관리**: Traffic Manager를 통한 글로벌 트래픽 분산

*이 문서는 Azure에 대해 정리한 내용입니다.*