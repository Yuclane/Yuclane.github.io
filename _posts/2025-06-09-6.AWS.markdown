---
layout: post
title:  "AWS에 대한 개요 및 정의"
date:   2025-06-09 12:20 +0900
categories: Database
---

.

# AWS 클라우드 기초 및 핵심 서비스 완전 가이드

## 목차 (Table of Contents)
- [1. Cloud Concepts Overview](#1-cloud-concepts-overview)
- [2. Cloud Economics and Billing](#2-cloud-economics-and-billing)
- [3. AWS Global Infrastructure](#3-aws-global-infrastructure)
- [4. AWS Cloud Security](#4-aws-cloud-security)
- [5. Networking and Content Delivery](#5-networking-and-content-delivery)
- [6. AWS Compute Services](#6-aws-compute-services)
- [7. AWS Storage Services](#7-aws-storage-services)
- [학습 요약 및 실습 가이드](#학습-요약-및-실습-가이드)

---

## 1. Cloud Concepts Overview

### 클라우드 컴퓨팅 정의

**클라우드 컴퓨팅**은 물리적인 데이터 센터나 서버를 구입하거나 직접 관리하는 대신, CSP(Cloud Service Provider)로부터 필요에 따라 컴퓨팅, 데이터베이스, 스토리지, 애플리케이션 등 IT 리소스들을 사용한 만큼만 비용을 지불하는 서비스입니다.

#### 핵심 용어

- **CSP (Cloud Service Provider)**: 클라우드 서비스를 제공하는 기업
- **MSP (Managed Service Provider)**: CSP를 통해 클라우드 서비스들을 설계, 구축, 관리, 유지보수를 하는 기업

### IT 서비스 제품 모델

| 온프레미스 솔루션 | IaaS (서비스형 인프라) | PaaS (서비스형 플랫폼) | SaaS (서비스형 소프트웨어) |
|------------------|----------------------|---------------------|------------------------|
| 데이터 센터나 서버를 직접 소유하거나 관리하는 환경 | 네트워크, 컴퓨터, 저장소 자원 등을 CSP가 제공하고 관리하는 서비스<br/>**예시**: 컴퓨팅(EC2), 스토리지(EBS) | 컴퓨팅 자원과 운영체제, 미들웨어, 런타임까지 CSP가 관리하고 제공하는 서비스<br/>**예시**: 관계형 데이터베이스(RDS), Lambda | 기성 애플리케이션/솔루션을 바로 사용 가능<br/>**예시**: 웹 이메일, CRM 플랫폼 |

### 클라우드의 3가지 레벨

![클라우드 서비스 모델](/assets/Images/6.AWS/image.png)
*IaaS, PaaS, SaaS의 책임 분담 모델*

각 서비스 모델에서 고객과 제공업체의 책임 범위가 다르게 구분됩니다:

- **IaaS**: 인프라만 제공, 운영체제 이상은 고객 책임
- **PaaS**: 플랫폼까지 제공, 애플리케이션과 데이터는 고객 책임  
- **SaaS**: 소프트웨어까지 모두 제공, 사용자는 사용만

### IT 배포 모델

![IT 배포 모델](/assets/Images/6.AWS/image%201.png)
*클라우드, 하이브리드, 온프레미스 배포 모델 비교*

#### 배포 모델 비교

| 배포 모델 | 특징 | 장점 | 단점 | 적용 사례 |
|----------|------|------|------|----------|
| **클라우드** | 100% 클라우드 환경 | 확장성, 비용 효율성 | 인터넷 의존성 | 스타트업, 신규 프로젝트 |
| **하이브리드** | 온프레미스 + 클라우드 | 유연성, 점진적 전환 | 복잡한 관리 | 기존 시스템 보유 기업 |
| **온프레미스** | 자체 데이터센터 | 완전한 제어 | 높은 초기비용 | 규제가 엄격한 산업 |

### AWS와 기존 IT의 유사점

![AWS와 기존 IT 비교](/assets/Images/6.AWS/image%202.png)
*기존 IT 인프라와 AWS 서비스의 대응 관계*

### 클라우드 컴퓨팅의 핵심 원칙

1. **온디맨드 리소스 제공**: IT 리소스를 필요에 따라 인터넷을 통해 제공하고 사용한 만큼만 비용을 지불
2. **인프라의 소프트웨어화**: 인프라를 소프트웨어로 생각하고 사용할 수 있음
3. **세 가지 서비스 모델**: IaaS, PaaS, SaaS의 클라우드 서비스 모델
4. **세 가지 배포 모델**: 클라우드, 하이브리드, 온프레미스 배포 모델
5. **완전한 호환성**: 기존 IT로 구현할 수 있는 거의 모든 것이 AWS에서도 구현 가능

### 클라우드 컴퓨팅의 6가지 이점

#### 1. 초기 자본 비용을 가변 비용으로 전환
- 초기 비용은 적게 들고, 사용량에 따라 지불하는 모델

#### 2. 거대한 규모의 경제
- 모든 고객의 총 사용량 덕분에 비용 절감의 이점

#### 3. 용량 추정 불필요
- 수요에 맞게 자동 조정 가능 (Scaling on demand)

#### 4. 속도 및 민첩성 향상
- 필요한 리소스를 구매 과정 없이 요청 후 빠르게 사용 가능

#### 5. 데이터 센터 운영 비용 불필요
- 데이터 센터 운영 대신 핵심 비즈니스에 집중 가능

#### 6. 몇 분 만에 전 세계 배포
- 전 세계 리전을 통해 다른 국가에 즉시 서비스 가능

### AWS 소개

1. **안전한 글로벌 클라우드 플랫폼**: 다양한 글로벌 클라우드 기반 제품을 제공
2. **다양한 서비스 범주**: 각 범주에는 선택할 수 있는 다양한 서비스 존재
3. **요구사항 기반 선택**: 비즈니스 목표와 기술 요구사항에 따른 적절한 서비스 선택
4. **세 가지 상호작용 방법**: 관리 콘솔, CLI, SDK를 통한 AWS 서비스 상호작용

### AWS CAF (Cloud Adoption Framework)

![AWS CAF 프레임워크](/assets/Images/6.AWS/image%203.png)
*AWS 클라우드 도입 프레임워크의 6가지 관점*

AWS CAF는 조직의 클라우드 도입을 위한 체계적인 가이드를 제공합니다:

#### 비즈니스 영역
- **비즈니스**: 클라우드 투자의 비즈니스 가치 극대화
- **인력**: 조직 변화 관리 및 인력 개발
- **거버넌스**: 클라우드 이니셔티브의 위험 관리

#### 기술 영역
- **플랫폼**: 클라우드 네이티브 솔루션 구현
- **보안**: 데이터 및 클라우드 워크로드의 보안 보장
- **운영**: 클라우드 서비스의 지속적인 운영 및 최적화

**핵심 원칙:**
1. 클라우드 도입은 조직 전반의 신중한 전략과 조정이 필요
2. 효율적이고 효과적인 계획 수립을 지원
3. 4가지 혁신 영역과 6가지 기본 관점 제공
4. 주요 이해관계자의 책임 영역 명확화

---

## 2. Cloud Economics and Billing

### AWS 요금 체계

AWS 요금은 **컴퓨팅**, **스토리지**, **아웃바운드 데이터 전송** 3가지 주요 비용 요인으로 구성됩니다.

| 컴퓨팅 | 스토리지 | 데이터 전송 |
|--------|----------|-------------|
| • 시간/초당 요금<br/>• 인스턴스 유형에 따라 차이 | • 일반적으로 용량당 청구 | • 아웃바운드 요금은 집계하여 청구<br/>• 인바운드 무료 (일부 예외)<br/>• 일반적으로 GB당 청구 |

#### 참고 링크
- [Amazon EC2 온디맨드 요금](https://aws.amazon.com/ko/ec2/pricing/on-demand/)
- [Amazon S3 요금](https://aws.amazon.com/ko/s3/pricing/)
- [Amazon EC2 데이터 전송 요금](https://aws.amazon.com/ko/ec2/pricing/on-demand/#Data_Transfer)

### 예약 인스턴스 (Reserved Instance)

![예약 인스턴스 할인율](/assets/Images/6.AWS/image%204.png)
*예약 인스턴스 결제 옵션별 할인율 비교*

#### 예약 인스턴스 종류

1. **All Upfront RI (AURI)** - 전체 선결제 예약 인스턴스
   - 가장 높은 할인폭 제공

2. **Partial Upfront RI (PURI)** - 부분 선결제 예약 인스턴스
   - 중간 수준의 할인 제공

3. **No Upfront Payments RI (NURI)** - 선결제 없는 예약 인스턴스
   - 낮은 수준의 할인 제공

### AWS 요금 특징

#### 요금 장점
- 사용 시간이 길어질수록 시간당 요금 절약 가능
- 유연한 사용량 기반 요금제
- 언제든 시작하고 중지 가능
- 장기 계약 불필요

#### 무료 항목
- AWS 인바운드 데이터 전송
- 동일 리전 내 AWS 서비스 간 데이터 전송

#### 주의사항
- 일부 서비스는 무료이지만 연관 AWS 서비스는 유료일 수 있음

### 총 소유 비용 (TCO, Total Cost of Ownership)

**TCO**는 시스템의 직접 및 간접 비용을 확인하는 재정적 추정치입니다.

#### TCO 계산 목적
- 온프레미스와 AWS 전체 인프라 환경 비용 비교
- 특정 워크로드 실행 비용 비교
- 클라우드 마이그레이션 비용 분석

### AWS 요금 계산기

[AWS Pricing Calculator](https://calculator.aws/)를 통해 다음 작업이 가능합니다:

1. **월별 비용 예상**
2. **비용 절감 기회 파악**
3. **솔루션 구축 전 모델링**
4. **가격 및 요금 계산 분석**
5. **적절한 인스턴스 유형 및 계약 조건 검토**
6. **견적 관리 및 서비스 그룹 생성**

### AWS Organizations

**AWS Organizations**는 여러 AWS 계정을 중앙에서 관리하기 위한 서비스입니다.

#### 핵심 기능

##### 중앙 집중식 계정 관리
- 여러 AWS 계정을 하나의 조직으로 통합 관리
- 신규 AWS 계정 생성 및 기존 계정 추가 가능

##### 서비스 제어 정책 (SCP, Service Control Policies)
- 조직 내 OU(조직 단위), 계정별 서비스 접근 제어
- OU 내 계정의 액세스 허용 및 거부 설정

##### 계층화된 정책 적용 (OU, Organizational Units)
- 계정 계층 구조로 그룹별 관리
- 개발, 운영, 테스트 등 환경별 계정 구분

##### 보안 및 규정 준수 강화
- IAM 서비스를 통한 일관된 보안 정책 적용
- AWS Security Hub, Config, Control Tower 연계

##### 통합 결제 (Consolidated Billing)
- 여러 계정 비용을 하나로 통합하여 결제
- 모든 계정 이용 요금의 통합 청구서 제공
- RI(예약 인스턴스) 구매 할인 혜택 공유
- Savings Plans 공유를 통한 비용 절감

#### Organizations 구조

```
Root (최상위 계정)
├── OU (조직 단위 1)
│   ├── AWS Account A
│   └── AWS Account B
└── OU (조직 단위 2)
    ├── AWS Account C
    └── AWS Account D
```

- **Root**: 모든 권한을 가진 최상위 계정
- **OU**: 루트 계정들을 그룹화하는 조직 단위
- **Policy**: 조직 단위에 연결하여 하위 모든 계정 관리

---

## 3. AWS Global Infrastructure

### 네트워크 지연 시간 체크

AWS 리전별 네트워크 지연 시간은 [cloudping.info](https://www.cloudping.info/)에서 확인할 수 있습니다.

### AWS 리전 (Region)

#### 리전의 특징
1. **글로벌 분산**: 전 세계 36개 리전 운영 (계속 확장 중)
2. **물리적/지리적 위치**: 하나 이상의 가용 영역을 포함
3. **완전한 격리**: 각 리전은 서로 완전히 분리되고 이중화되도록 설계
4. **다중 가용 영역**: 일반적으로 2개 이상의 가용 영역으로 구성

#### 리전 선택 기준
- **규정 준수 요구사항** 고려
- **지연 시간(Latency)** 최소화
- **서비스 가용성** 확인
- **비용 효율성** 검토

### AWS 가용 영역 (Availability Zone)

#### 가용 영역의 특징
1. **리전 내 분산**: 각 AWS 리전에는 여러 개의 가용 영역 존재
2. **독립적 격리**: 한 영역 문제 발생 시 다른 영역은 영향받지 않음
3. **고가용성 보장**: 내결함성과 안정성 제공
4. **전략적 활용**: 복원력 있는 클라우드 인프라 구축 가능

### AWS 데이터 센터

#### 데이터 센터 특징
1. **데이터 처리 중심지**: 데이터가 상주하고 처리되는 위치
2. **이중화 설계**: 이중화된 전력, 네트워킹, 연결 사용
3. **물리적 분리**: 별도 시설에 구축
4. **대규모 용량**: 일반적으로 50,000~80,000대의 물리적 서버 보유

### AWS CloudFront 글로벌 네트워크

![CloudFront 글로벌 네트워크](/assets/Images/6.AWS/image%206.png)
*CloudFront의 엣지 로케이션 및 리전별 엣지 캐시 분포*

#### CloudFront 구성 요소
1. **글로벌 네트워크**: 47개국 90개 도시에서 700개가 넘는 PoP(Point of Presence) 운영
2. **엣지 로케이션**: 500개 이상의 엣지 로케이션
3. **리전별 엣지 캐시**: 14개의 리전별 엣지 캐시
4. **CDN 서비스**: Amazon CloudFront와 함께 사용하여 짧은 지연 시간으로 콘텐츠 전송

### 글로벌 CDN (콘텐츠 전송 네트워크)

**CDN**은 사용자에게 콘텐츠를 빠르고 효율적으로 제공하는 기술입니다. 전 세계에 분산된 서버 네트워크를 활용해 사용자와 가까운 서버에서 콘텐츠를 전송합니다.

#### CDN 동작 원리
```
사용자 요청 → 가장 가까운 엣지 로케이션 → 캐시 확인 → 콘텐츠 전송
              ↓ (캐시 미스 시)
         오리진 서버에서 콘텐츠 가져와 캐시 후 전송
```

### AWS 인프라 기능

#### 1. 탄력성 및 확장성
- **탄력적 인프라**: 동적 용량 조정
- **확장 가능한 인프라**: 성장 수용을 위한 조정

#### 2. 내결함성 (Fault Tolerance)
- **지속적 작동**: 장애 발생 시에도 계속 정상 작동
- **내장된 이중화**: 구성 요소의 자동 이중화

#### 3. 고가용성 (High Availability)
- **높은 운영 성능**: 가동 중단 시간 최소화
- **무인 운영**: 인적 개입 없는 자동 복구

### AWS 핵심 사항

1. **인프라 구성**: AWS 글로벌 인프라는 리전과 가용 영역으로 구성
2. **리전 선택**: 규정 준수 요구사항과 지연 시간을 고려하여 선택
3. **가용 영역 분리**: 각 가용 영역은 물리적으로 분리되어 중복 전원, 네트워킹, 연결 보유
4. **엣지 최적화**: 엣지 로케이션과 리전별 엣지 캐시를 통한 성능 향상

### AWS 기초 서비스 개요

![AWS 기초 서비스](/assets/Images/6.AWS/image%207.png)
*AWS의 핵심 서비스들과 글로벌 인프라의 관계*

주요 서비스들:
- **PoP & CloudFront**: 콘텐츠 전송 네트워크
- **S3**: 객체 스토리지 서비스
- **EBS**: 블록 스토리지 서비스
- **EC2**: 컴퓨팅 서비스
- **Auto Scaling**: 자동 확장 서비스
- **Elastic Beanstalk**: 애플리케이션 배포 플랫폼
- **Lambda**: 서버리스 컴퓨팅

---

## 4. AWS Cloud Security

### AWS 공동 책임 모델

![AWS 공동 책임 모델](/assets/Images/6.AWS/image%208.png)
*AWS와 고객 간의 보안 책임 분담*

AWS 클라우드 보안은 **공동 책임 모델**을 기반으로 합니다.

#### AWS의 책임: "클라우드의 보안" (Security of the Cloud)

##### 1. 데이터 센터의 물리적 보안
- 필요 기반의 제어된 액세스
- 물리적 시설 보안

##### 2. 하드웨어 및 소프트웨어 인프라
- 스토리지 폐기 관리
- 호스트 OS(운영 체제) 관리
- 액세스 로깅 및 감사

##### 3. 네트워크 인프라
- 침입 탐지 시스템
- 네트워크 보안

##### 4. 가상화 인프라
- 인스턴스 격리
- 하이퍼바이저 보안

#### 고객의 책임: "클라우드에서의 보안" (Security in the Cloud)

##### 1. 운영 체제 관리
- Amazon EC2 인스턴스 운영 체제
- 패치 적용 및 유지 관리

##### 2. 애플리케이션 보안
- 암호 관리
- 역할 기반 액세스 제어

##### 3. 네트워크 구성
- 보안 그룹 설정
- OS 또는 호스트 기반 방화벽
- 침입 탐지/차단 시스템

##### 4. 계정 관리
- 각 사용자의 로그인 및 권한 설정
- IAM 정책 관리

#### 서비스 특성별 책임 범위

서비스 모델에 따른 고객 책임 범위:
- **IaaS > PaaS > SaaS** 순으로 고객 책임 범위 감소
- IaaS 사용자가 가장 많은 보안 책임
- SaaS는 CSP에서 대부분의 보안 관리

### IAM (Identity and Access Management)

#### IAM 개요

**IAM**은 AWS 고객이 사용자와 사용자 권한을 관리할 때 사용하는 서비스입니다.

#### IAM 주요 기능

1. **액세스 관리**: AWS 리소스에 대한 액세스 제어
2. **세분화된 권한**: 리소스별, 작업별 상세 권한 설정
3. **사용자 제어**: EC2 인스턴스 종료 권한 등 세밀한 제어
4. **무료 서비스**: AWS 계정에 무료로 제공

#### IAM 구성 요소

![IAM 구성 요소](/assets/Images/6.AWS/image%209.png)
*IAM의 주요 구성 요소 관계도*

##### 1. IAM 사용자 (User)
- AWS 계정으로 인증할 수 있는 사람 또는 애플리케이션
- 개별 자격 증명과 권한 보유

##### 2. IAM 그룹 (Group)
- 동일한 권한을 가진 IAM 사용자의 모음
- 권한 관리 효율성 향상
- 한 사용자가 여러 그룹에 속할 수 있음
- 기본 그룹 없음, 그룹 중첩 불가능

##### 3. IAM 정책 (Policy)
- 액세스할 수 있는 리소스와 액세스 수준을 정의하는 문서
- JSON 형식으로 작성
- 세분화된 액세스 제어 가능

##### 4. IAM 역할 (Role)
- 특정 권한이 있는 IAM 자격 증명
- 개인에게 고유하게 연결되지 않음
- 임시 보안 자격 증명 제공

#### IAM MFA (Multi-Factor Authentication)

**MFA** 사용 시 사용자 이름과 암호 외에 고유한 인증 코드를 추가로 제공해야 AWS 서비스에 액세스할 수 있습니다.

#### IAM 역할의 특징

1. **임시 자격 증명**: 영구적이지 않은 임시 보안 자격 증명
2. **위임 가능**: 개인, 애플리케이션, 서비스가 역할 수임 가능
3. **다양한 사용 사례**:
   - 동일 AWS 계정의 IAM 사용자가 사용
   - AWS 서비스(예: Amazon EC2)에서 사용
   - 다른 AWS 계정의 IAM 사용자가 사용

#### IAM 정책 유형

![IAM 정책 예제](/assets/Images/6.AWS/image%2010.png)
*IAM 정책의 구조와 예제*

##### 1. 자격 증명 기반 정책
- IAM 사용자, 그룹, 역할에 연결
- 엔터티가 수행할 수 있는/없는 작업 지정
- 단일 정책을 여러 엔터티에 연결 가능
- 단일 엔터티에 여러 정책 연결 가능

##### 2. 리소스 기반 정책
- 리소스(예: S3 버킷)에 직접 연결
- 사용자, 그룹, 역할에 연결되지 않음

#### IAM 정책 평가 순서

![IAM 정책 평가](/assets/Images/6.AWS/image%2011.png)
*IAM 정책 평가 흐름도*

##### 정책 평가 원칙
1. **기본 거부**: 모든 권한은 암시적으로 거부됨
2. **명시적 허용**: 명시적으로 허용된 작업만 실행 가능
3. **명시적 거부 우선**: 명시적으로 거부된 항목은 절대 허용되지 않음
4. **최소 권한 원칙**: 필요한 최소한의 권한만 부여

#### IAM 정책 예제

![IAM 정책 상세 예제](/assets/Images/6.AWS/image%2012.png)
*실제 IAM 정책 JSON 구조*

```json
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "s3:GetObject",
        "s3:PutObject"
      ],
      "Resource": "arn:aws:s3:::my-bucket/*"
    }
  ]
}
```

#### 새 AWS 계정 보안 설정

##### Root 계정 보안 모범 사례

**1단계: Root 사용자 사용 중지**
- 계정 루트 사용자는 모든 리소스에 제한 없는 액세스 권한
- 필요한 경우를 제외하고 사용 금지

**Root 사용자만 수행 가능한 작업:**
- 계정 루트 사용자 암호 업데이트
- AWS Support 플랜 변경
- IAM 사용자의 권한 복원
- 계정 설정 변경(연락처 정보, 허용된 리전 등)

**2단계: MFA(Multi-Factor Authentication) 활성화**
- 계정 루트 사용자와 모든 IAM 사용자에게 MFA 요구
- AWS 서비스 API 액세스도 MFA로 제어 가능

**3단계: AWS CloudTrail 사용**
- 계정의 사용자 활동 추적
- 지원되는 모든 서비스의 리소스에 대한 API 호출 로깅
- 기본 CloudTrail 이벤트 기록은 무료 (최근 90일간 관리 이벤트)

**4단계: 결제 보고서 활성화**
- AWS 비용 및 사용 보고서 활성화
- AWS 리소스 사용량과 추정 비용 정보 제공
- 지정한 Amazon S3 버킷으로 일일 업데이트

### AWS Landing Zone

#### Landing Zone 개념

**AWS Landing Zone**은 확장 가능하고 보안이 강화된 다중 계정 AWS 환경입니다.

#### Landing Zone의 목적
1. **신속한 배포**: 워크로드와 애플리케이션을 빠르게 시작할 수 있는 환경
2. **보안 강화**: 보안 및 인프라 환경에 대한 신뢰성 제공
3. **확장성**: 조직의 성장과 미래 비즈니스 목표에 대응

#### Landing Zone 구축 고려사항
- **계정 구조 (Account Structure)**: 조직별, 환경별 계정 분리
- **네트워킹 (Networking)**: VPC, 서브넷, 연결성 설계
- **보안 (Security)**: IAM, 암호화, 모니터링 체계
- **액세스 관리 (Access Management)**: 사용자 및 권한 관리

#### 다중 계정을 사용하는 이유

##### 1. 보안 관리 (Security Controls)
- 애플리케이션마다 다른 보안 요구사항 대응

##### 2. 격리 (Isolation)
- AWS 계정은 보안을 위한 독립적인 단위로 작동

##### 3. 팀별 운영 (Many Teams)
- 다양한 팀의 각기 다른 역할과 리소스 요구사항 지원

##### 4. 비즈니스 프로세스 (Business Process)
- 서로 다른 비즈니스 부서나 제품의 각기 다른 목적과 프로세스

##### 5. 비용 관리 (Billing)
- 비즈니스 부서, 기능별 팀, 개별 사용자 단위로 비용 분리 관리

#### Landing Zone 구축 옵션

1. **AWS Control Tower**: AWS에서 제공하는 관리형 Landing Zone 서비스
2. **Custom-built Landing Zone**: 조직 요구사항에 맞춘 맞춤형 구축

### AWS Control Tower

![AWS Control Tower](/assets/Images/6.AWS/image%2013.png)
*AWS Control Tower를 통한 다중 계정 거버넌스*

**AWS Control Tower**는 안전하고 규정을 준수하는 다중 계정 AWS 환경을 자동으로 설정하고 관리하는 서비스입니다.

#### Control Tower 주요 기능
- **자동화된 계정 설정**: 보안 및 규정 준수 기준에 따른 계정 프로비저닝
- **중앙 집중식 거버넌스**: 모든 계정에 대한 일관된 정책 적용
- **지속적인 모니터링**: 규정 준수 상태 실시간 감시
- **사전 구성된 가드레일**: 보안 및 규정 준수를 위한 예방적 및 탐지적 제어

---

## 5. Networking and Content Delivery

### 네트워크 기초 개념

#### 네트워크 정의
1. **네트워크**: 2개 이상의 클라이언트 시스템이 서로 연결되어 리소스를 공유하는 구조
2. **서브넷**: 네트워크를 논리적으로 분할하는 단위
3. **네트워킹 디바이스**: 클라이언트 간 연결과 통신을 위한 라우터, 스위치 등

#### IP 주소 (IP Address)
1. **고유 식별자**: 네트워크의 각 시스템을 식별하는 고유한 주소
2. **10진수 형식**: 각 숫자는 0~255 범위의 점으로 구분된 형태
3. **이진수 변환**: 내부적으로 이진수로 변환되어 처리
4. **32비트 구조**: 각 옥텟을 8비트(1바이트)로 변환하여 총 32비트

#### CIDR (Classless Inter-Domain Routing)

**CIDR**는 IP 주소 할당과 라우팅을 효율적으로 관리하기 위한 방법입니다.

```
예시: 192.168.1.0/24
- 192.168.1.0: 네트워크 주소
- /24: 서브넷 마스크 (처음 24비트가 네트워크 부분)
- 사용 가능한 호스트: 256개 (192.168.1.0 ~ 192.168.1.255)
```

### OSI 7계층 모델

![OSI 7계층](/assets/Images/6.AWS/image%2014.png)
*OSI 7계층 모델과 각 계층의 역할*

| 계층 | 이름 | 역할 | 예시 |
|------|------|------|------|
| 7 | 응용 계층 (Application) | 사용자 인터페이스 제공 | HTTP, HTTPS, FTP |
| 6 | 표현 계층 (Presentation) | 데이터 암호화, 압축 | SSL/TLS, JPEG |
| 5 | 세션 계층 (Session) | 세션 관리 | SQL, NetBIOS |
| 4 | 전송 계층 (Transport) | 신뢰성 있는 데이터 전송 | TCP, UDP |
| 3 | 네트워크 계층 (Network) | 라우팅, 경로 설정 | IP, ICMP |
| 2 | 데이터 링크 계층 (Data Link) | 프레임 전송, 오류 검출 | Ethernet, WiFi |
| 1 | 물리 계층 (Physical) | 실제 데이터 전송 | 케이블, 허브 |

### Amazon VPC (Virtual Private Cloud)

#### VPC 개요
**Amazon VPC**는 AWS 클라우드에서 논리적으로 격리된 가상 네트워크 환경을 제공합니다.

#### VPC 주요 특징
1. **논리적 격리**: 다른 VPC와 완전히 분리된 환경
2. **전용 환경**: 사용자의 AWS 계정 전용
3. **리전 범위**: 단일 AWS 리전에 속하며 여러 가용 영역에 걸쳐 구현
4. **완전한 제어**: 가상 네트워킹 리소스의 완전한 제어권

#### VPC 제어 가능한 요소
- **IP 주소 범위**: VPC에서 사용할 IP 주소 대역 선택
- **서브넷 생성**: 가용 영역별 서브넷 구성
- **라우팅 테이블**: 트래픽 라우팅 규칙 설정
- **네트워크 게이트웨이**: 인터넷 게이트웨이, NAT 게이트웨이 구성

### 서브넷 (Subnet)

#### 서브넷 특징
1. **IP 주소 범위**: VPC를 분할하는 IP 주소의 범위
2. **가용 영역 종속**: 단일 가용 영역에 속함
3. **퍼블릭/프라이빗 분류**: 인터넷 접근 가능 여부에 따른 분류

#### 서브넷 유형

##### 퍼블릭 서브넷
- 인터넷 게이트웨이로의 라우팅 경로 보유
- 퍼블릭 IP 주소 할당 가능
- 웹 서버, 로드 밸런서 배치

##### 프라이빗 서브넷
- 인터넷 게이트웨이로의 직접 라우팅 없음
- 프라이빗 IP 주소만 사용
- 데이터베이스, 애플리케이션 서버 배치

### IP 주소 유형

#### 퍼블릭 IP 주소
1. **인터넷 액세스**: 서버가 인터넷에 접근하기 위해 필수
2. **자동 할당**: EC2 생성 시 서브넷 설정에 따라 자동 할당
3. **동적 할당**: 인스턴스 중지/시작 시 새로운 IP 할당
4. **일시적 특성**: 고정되지 않는 임시 IP

#### 탄력적 IP 주소 (Elastic IP Address)
1. **고정 IP**: 클라우드 환경을 위한 고정 퍼블릭 IPv4 주소
2. **지속성**: 인스턴스 중지/시작 시에도 변경되지 않음
3. **재할당 가능**: 다른 인스턴스로 이동 가능
4. **비용 발생**: 사용하지 않을 때 추가 요금 발생

### 탄력적 네트워크 인터페이스 (ENI)

#### ENI 특징
1. **가상 네트워크 카드**: VPC의 가상 네트워크 인터페이스
2. **연결/분리 가능**: 인스턴스에 동적으로 연결/분리
3. **트래픽 리디렉션**: 네트워크 트래픽을 다른 인스턴스로 이동
4. **속성 유지**: 인스턴스 재연결 시 속성 그대로 적용

#### ENI 활용 사례
- **고가용성**: 메인 인스턴스 장애 시 백업 인스턴스로 ENI 이동
- **듀얼 홈**: 하나의 인스턴스에 여러 네트워크 인터페이스 연결
- **라이선스 관리**: MAC 주소 기반 라이선스 유지

### 라우팅 테이블 및 경로

#### 라우팅 테이블
**라우팅 테이블**은 서브넷에서 네트워크 트래픽의 전송 방향을 결정하는 규칙 집합입니다.

#### 라우팅 규칙 구성
- **대상 위치 (Destination)**: 트래픽의 목적지 주소
- **대상 (Target)**: 트래픽이 전달될 게이트웨이 또는 인터페이스

#### 기본 라우팅
- **로컬 경로**: VPC 내부 통신을 위한 기본 경로 (예: 10.0.0.0/16 → Local)
- **서브넷 연결**: 각 서브넷은 하나의 라우팅 테이블과 연결

```
예시 라우팅 테이블:
Destination     Target
10.0.0.0/16    Local
0.0.0.0/0      Internet Gateway
```

### 게이트웨이

#### 인터넷 게이트웨이 (Internet Gateway)
1. **양방향 통신**: VPC와 인터넷 간의 양방향 통신 지원
2. **퍼블릭 액세스**: 퍼블릭 IP를 가진 인스턴스의 인터넷 접근 허용
3. **고가용성**: AWS에서 관리하는 고가용성 서비스
4. **무료 서비스**: 데이터 전송 외 추가 비용 없음

#### NAT 게이트웨이 (NAT Gateway)
1. **단방향 통신**: 프라이빗 서브넷에서 인터넷으로의 아웃바운드 전용
2. **보안 강화**: 인바운드 연결 차단으로 보안성 향상
3. **관리형 서비스**: AWS에서 완전 관리
4. **고가용성**: 가용 영역 내 자동 이중화

```
NAT Gateway 사용 패턴:
Private Subnet → NAT Gateway → Internet Gateway → Internet
```

### 보안 제어

#### 보안 그룹 (Security Groups)

![보안 그룹](/assets/Images/6.AWS/image%2015.png)
*보안 그룹의 인바운드/아웃바운드 규칙 구조*

##### 보안 그룹 특징
1. **인스턴스 수준**: 개별 EC2 인스턴스에 적용
2. **가상 방화벽**: 인스턴스의 네트워크 트래픽 제어
3. **상태 저장 (Stateful)**: 허용된 인바운드 트래픽의 응답은 자동 허용
4. **허용 규칙만**: 트래픽을 허용하는 규칙만 설정 (거부 규칙 없음)

##### 기본 동작
- **인바운드**: 기본적으로 모든 트래픽 거부
- **아웃바운드**: 기본적으로 모든 트래픽 허용

#### 네트워크 ACL (Network Access Control Lists)

![네트워크 ACL](/assets/Images/6.AWS/image%2016.png)
*네트워크 ACL의 규칙 평가 순서*

##### 네트워크 ACL 특징
1. **서브넷 수준**: 서브넷 단위에서 작동
2. **상태 비저장 (Stateless)**: 인바운드와 아웃바운드 규칙 개별 평가
3. **순서 기반**: 낮은 번호의 규칙부터 순차적으로 평가
4. **허용/거부**: 트래픽을 허용하거나 거부하는 규칙 모두 설정 가능

##### 기본 동작
- **기본 네트워크 ACL**: 모든 인바운드/아웃바운드 트래픽 허용
- **사용자 정의 ACL**: 모든 트래픽 기본 거부

#### 보안 그룹 vs 네트워크 ACL 비교

![보안 제어 비교](/assets/Images/6.AWS/image%2017.png)
*보안 그룹과 네트워크 ACL의 차이점*

| 구분 | 보안 그룹 | 네트워크 ACL |
|------|----------|-------------|
| **작동 레벨** | 인스턴스 | 서브넷 |
| **상태** | Stateful | Stateless |
| **규칙 유형** | 허용만 | 허용/거부 |
| **규칙 평가** | 모든 규칙 평가 | 순서대로 평가 |
| **기본 동작** | 인바운드 거부/아웃바운드 허용 | 모든 트래픽 허용 |

---

## 6. AWS Compute Services

### 콘텐츠 전송 및 CloudFront

#### 네트워크 지연 시간 문제

![콘텐츠 전송 지연](/assets/Images/6.AWS/image%2018.png)
*글로벌 사용자의 콘텐츠 접근 시 발생하는 지연 시간*

지리적으로 멀리 떨어진 사용자가 콘텐츠에 접근할 때 발생하는 문제:
- **높은 지연 시간**: 물리적 거리로 인한 네트워크 지연
- **느린 로딩**: 대용량 콘텐츠 전송 시간 증가
- **대역폭 제한**: 원거리 전송 시 대역폭 효율성 저하

#### CDN (Content Delivery Network) 솔루션

**CDN**은 전 세계에 분산된 캐싱 서버 시스템을 통해 다음 기능을 제공합니다:

1. **정적 콘텐츠 캐싱**: 자주 요청되는 파일의 사본을 엣지 로케이션에 저장
2. **가까운 서버 제공**: 사용자와 가장 가까운 PoP에서 콘텐츠 전송
3. **동적 콘텐츠 가속화**: 동적 콘텐츠 전송 경로 최적화
4. **성능 및 확장성 개선**: 애플리케이션 전반적인 성능 향상

### Amazon CloudFront

#### CloudFront 개요
- **빠르고 안전한 글로벌 CDN**: AWS의 관리형 콘텐츠 전송 네트워크
- **글로벌 네트워크**: 엣지 로케이션과 리전 엣지 캐시의 세계적 분포
- **셀프 서비스**: 사용자가 직접 구성하고 관리
- **종량 과금제**: 사용량에 따른 비용 지불

#### CloudFront 인프라 구성

##### 1. Edge Locations (엣지 로케이션)
- 고객에게 인기 콘텐츠를 신속 제공하는 데이터 센터 네트워크
- 전 세계 500개 이상의 엣지 로케이션 운영

##### 2. Regional Edge Cache (리전별 엣지 캐시)
- 엣지 로케이션보다 사용 빈도가 낮은 콘텐츠 캐싱
- 오리진 서버와 글로벌 엣지 로케이션 사이에 위치
- 14개의 리전별 엣지 캐시 운영

#### CloudFront 5가지 주요 이점

1. **빠른 속도와 글로벌 규모**: 전 세계 분산된 인프라로 빠른 콘텐츠 전송
2. **엣지 보안**: 엣지 로케이션에서의 보안 기능 제공
3. **고도의 프로그래밍 가능성**: Lambda@Edge를 통한 엣지 컴퓨팅
4. **AWS 완벽 통합**: 다른 AWS 서비스와의 원활한 연동
5. **비용 효율성**: 합리적인 가격과 다양한 요금 옵션

### EC2 (Elastic Compute Cloud)

#### AWS 컴퓨팅 서비스 개요

![AWS 컴퓨팅 서비스](/assets/Images/6.AWS/image%2019.png)
*AWS의 다양한 컴퓨팅 서비스들*

![컴퓨팅 서비스 상세](/assets/Images/6.AWS/image%2020.png)
*각 컴퓨팅 서비스의 사용 사례와 특징*

#### AMI (Amazon Machine Image)

##### AMI 개념
**AMI**는 EC2 인스턴스를 생성하는 데 사용되는 운영체제 템플릿입니다.

##### AMI 구성 요소
- **운영체제**: Amazon Linux, Ubuntu, Windows Server 등
- **사전 설치 소프트웨어**: 특정 용도에 맞는 소프트웨어 패키지
- **구성 설정**: 시스템 및 애플리케이션 설정

![AMI 선택 옵션](/assets/Images/6.AWS/image%2021.png)
*AMI 선택 시 사용 가능한 옵션들*

##### AMI 선택 옵션

1. **Quick Start**: AWS에서 제공하는 공식 Linux 및 Windows AMI
2. **My AMI**: 사용자가 직접 생성한 커스텀 AMI
3. **AWS Marketplace**: 3rd party가 제공하는 상용 템플릿
4. **Community AMI**: 다른 사용자가 공유하는 AMI (보안 책임은 사용자)

#### EC2 인스턴스 생성 시 선택사항

![인스턴스 설정 옵션](/assets/Images/6.AWS/image%2022.png)
*EC2 인스턴스 생성 시 고려해야 할 주요 설정들*

#### 인스턴스 유형 (Instance Types)

##### 인스턴스 유형 결정 요소
선택하는 인스턴스 유형에 따라 다음이 결정됩니다:
- **메모리 (RAM)**: 시스템 메모리 용량
- **처리 능력 (CPU)**: 프로세서 성능과 코어 수
- **스토리지**: 디스크 공간 및 디스크 유형
- **네트워크 성능**: 네트워크 대역폭과 지연 시간

##### 인스턴스 유형 범주

1. **범용 (General Purpose)**: 균형 잡힌 컴퓨팅, 메모리, 네트워킹 리소스
2. **컴퓨팅 최적화 (Compute Optimized)**: 고성능 프로세서가 필요한 워크로드
3. **메모리 최적화 (Memory Optimized)**: 메모리 집약적 애플리케이션
4. **스토리지 최적화 (Storage Optimized)**: 로컬 스토리지에 대한 높은 액세스 필요
5. **가속화 컴퓨팅 (Accelerated Computing)**: GPU나 FPGA 활용 워크로드

![인스턴스 명명 규칙](/assets/Images/6.AWS/image%2023.png)
*EC2 인스턴스 유형의 명명 규칙*

##### 인스턴스 명명 규칙
```
m5.large
│ │  │
│ │  └── 크기 (Size): nano, micro, small, medium, large, xlarge, 2xlarge...
│ └───── 세대 (Generation): 숫자가 높을수록 최신
└────────── 패밀리 (Family): m(범용), c(컴퓨팅), r(메모리), i(스토리지)
```

### AWS Lambda

#### Lambda 소개

![Lambda 개요](/assets/Images/6.AWS/image%2024.png)
*AWS Lambda 서버리스 컴퓨팅 개념*

**AWS Lambda**는 서버를 프로비저닝하거나 관리하지 않고도 코드를 실행할 수 있는 서버리스 컴퓨팅 서비스입니다.

#### Lambda의 5가지 주요 장점

1. **다중 프로그래밍 언어 지원**: Python, Java, Node.js, C#, Go, Ruby 등
2. **완전 자동화된 관리**: 서버 관리, 패치, 모니터링 자동화
3. **내장된 내결함성**: 자동 복구 및 고가용성
4. **다중 함수 오케스트레이션**: 여러 함수의 조합 및 워크플로우 지원
5. **사용량 기반 요금**: 코드 실행 시간에 대해서만 비용 지불

#### Lambda 모니터링 및 로깅

![Lambda 모니터링](/assets/Images/6.AWS/image%2025.png)
*Lambda 함수의 모니터링 및 로깅 구조*

**모니터링 도구:**
- **Amazon CloudWatch**: 메트릭 수집 및 대시보드
- **AWS X-Ray**: 분산 애플리케이션 추적
- **CloudWatch Logs**: 함수 실행 로그 수집

#### Lambda 함수 설정

![Lambda 함수 설정](/assets/Images/6.AWS/image%2026.png)
*Lambda 함수의 주요 설정 항목들*

**주요 설정 항목:**
- **런타임**: 코드 실행 환경 (Python 3.9, Node.js 16.x 등)
- **메모리**: 128MB ~ 3,008MB (CPU 성능도 비례적으로 증가)
- **타임아웃**: 최대 15분
- **환경 변수**: 함수에서 사용할 설정값들
- **실행 역할**: Lambda 함수가 다른 AWS 서비스에 접근할 권한

#### Lambda 사용 사례

##### 예시 1: EC2 인스턴스 자동 관리

![Lambda EC2 자동화](/assets/Images/6.AWS/image%2027.png)
*CloudWatch Events를 통한 EC2 인스턴스 자동 시작/중지*

**시나리오:** 업무 시간에만 개발 서버를 운영하여 비용 절약
```python
import boto3

def lambda_handler(event, context):
    ec2 = boto3.client('ec2')
    
    # 오전 9시: 인스턴스 시작
    if event['detail']['state'] == 'start':
        response = ec2.start_instances(InstanceIds=['i-1234567890abcdef0'])
    
    # 오후 6시: 인스턴스 중지
    elif event['detail']['state'] == 'stop':
        response = ec2.stop_instances(InstanceIds=['i-1234567890abcdef0'])
    
    return response
```

##### 예시 2: S3 이미지 자동 썸네일 생성

![Lambda 이미지 처리](/assets/Images/6.AWS/image%2028.png)
*S3 이벤트 트리거를 통한 자동 썸네일 생성*

**시나리오:** S3에 이미지 업로드 시 자동으로 썸네일 생성
```python
import boto3
from PIL import Image
import io

def lambda_handler(event, context):
    s3 = boto3.client('s3')
    
    # S3 이벤트에서 버킷과 객체 정보 추출
    bucket = event['Records'][0]['s3']['bucket']['name']
    key = event['Records'][0]['s3']['object']['key']
    
    # 원본 이미지 다운로드
    response = s3.get_object(Bucket=bucket, Key=key)
    image = Image.open(io.BytesIO(response['Body'].read()))
    
    # 썸네일 생성 (150x150)
    thumbnail = image.resize((150, 150))
    
    # 썸네일을 다른 S3 버킷에 업로드
    thumbnail_key = f"thumbnails/{key}"
    
    buffer = io.BytesIO()
    thumbnail.save(buffer, format='JPEG')
    buffer.seek(0)
    
    s3.put_object(
        Bucket='thumbnail-bucket',
        Key=thumbnail_key,
        Body=buffer.getvalue(),
        ContentType='image/jpeg'
    )
    
    return f"Thumbnail created for {key}"
```

#### Lambda 제한 사항 (Quotas)

##### 리전별 소프트 제한 (증가 요청 가능)
- **동시 실행**: 1,000개
- **함수 및 레이어 스토리지**: 75GB

##### 개별 함수 하드 제한 (변경 불가)
- **최대 함수 메모리**: 3,008MB
- **함수 타임아웃**: 15분
- **배포 패키지 크기**: 250MB (압축 해제 시, 레이어 포함)

**추가 제한사항**: [AWS Lambda quotas 문서](https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-limits.html) 참조

### AWS Elastic Beanstalk

#### Beanstalk 소개

**AWS Elastic Beanstalk**은 웹 애플리케이션을 쉽게 배포하고 실행할 수 있는 관리형 서비스입니다.

#### Beanstalk 주요 특징

##### 자동 관리 기능
- **인프라 프로비저닝 및 구성**
- **배포 (Deployment)**
- **로드 밸런싱 (Load Balancing)**
- **자동 스케일링 (Auto Scaling)**
- **상태 모니터링 (Health Monitoring)**
- **분석 및 디버깅 (Analysis and Debugging)**
- **로깅 (Logging)**

##### 비용 구조
- **Elastic Beanstalk 자체는 무료**
- **기본 리소스 비용만 지불** (EC2, ELB, Auto Scaling 등)

#### 지원 플랫폼 및 배포

![Beanstalk 지원 플랫폼](/assets/Images/6.AWS/image%2029.png)
*Elastic Beanstalk에서 지원하는 플랫폼들*

##### 지원하는 플랫폼
- **언어**: Java, .NET, PHP, Node.js, Python, Ruby, Go
- **컨테이너**: Docker
- **웹 서버**: Apache, NGINX, Passenger, Puma, Microsoft IIS

##### 배포 과정
1. **코드 업로드**: 애플리케이션 코드를 Beanstalk에 업로드
2. **자동 배포**: Beanstalk이 자동으로 배포 처리
3. **서버 구성**: 적절한 웹 서버에 자동 배포

#### Beanstalk 사용 시나리오

```
개발자 워크플로:
1. 로컬에서 애플리케이션 개발
2. WAR/JAR 파일 또는 소스 코드 패키징
3. Beanstalk 콘솔에서 코드 업로드
4. 환경 구성 선택 (개발/스테이징/프로덕션)
5. 자동 배포 및 모니터링
```

---

## 7. AWS Storage Services

### 블록 스토리지 vs 객체 스토리지

![스토리지 유형 비교 1](/assets/Images/6.AWS/image%2030.png)
*블록 스토리지와 객체 스토리지의 기본 구조 차이*

![스토리지 유형 비교 2](/assets/Images/6.AWS/image%2031.png)
*각 스토리지 유형의 사용 사례와 특성*

#### 스토리지 유형 비교

| 구분 | 블록 스토리지 | 객체 스토리지 |
|------|-------------|-------------|
| **구조** | 블록 단위로 데이터 분할 | 객체 단위로 데이터 저장 |
| **접근 방식** | 파일 시스템을 통한 접근 | HTTP API를 통한 접근 |
| **성능** | 빠른 읽기/쓰기 | 높은 처리량 |
| **확장성** | 제한적 | 무제한 확장 |
| **용도** | 운영체제, 데이터베이스 | 백업, 아카이브, 웹 콘텐츠 |
| **AWS 서비스** | Amazon EBS | Amazon S3 |

### Amazon EBS (Elastic Block Store)

#### EBS 개요

**Amazon EBS**는 Amazon EC2 인스턴스에 연결할 수 있는 블록 수준 스토리지를 제공합니다.

#### EBS 주요 특징

1. **블록 수준 스토리지**: 데이터를 블록 단위로 저장하여 빠르고 효율적인 읽기/쓰기 작업
2. **데이터 복제**: 볼륨은 가용 영역 내에서 자동으로 복제되어 데이터 안정성 보장
3. **스냅샷 지원**: 스냅샷 기능을 사용하여 자동으로 S3에 볼륨 백업 및 복구

#### EBS 주요 용도

1. **부트 볼륨**: Amazon EC2 인스턴스의 운영 체제 및 애플리케이션 실행
2. **확장 볼륨**: 파일 시스템 데이터를 안전하게 저장하고 관리
3. **데이터베이스 호스트**: 관계형 및 비관계형 데이터베이스 저장소
4. **엔터프라이즈 애플리케이션**: 비즈니스 크리티컬 애플리케이션

### EBS 볼륨 유형

![EBS 볼륨 유형 1](/assets/Images/6.AWS/image%2032.png)
*EBS 볼륨 유형별 성능 특성*

![EBS 볼륨 유형 2](/assets/Images/6.AWS/image%2033.png)
*각 볼륨 유형의 상세 사양과 사용 사례*

#### SSD 기반 볼륨

##### gp3 (General Purpose SSD)
- **기본 성능**: 3,000 IOPS, 125MB/s 처리량
- **최대 성능**: 16,000 IOPS, 1,000MB/s 처리량
- **용량**: 1GB ~ 16TB
- **사용 사례**: 일반적인 워크로드, 개발 환경

##### gp2 (General Purpose SSD - 이전 세대)
- **기준 성능**: 3 IOPS/GB (최소 100 IOPS)
- **버스트 성능**: 최대 3,000 IOPS
- **용량**: 1GB ~ 16TB
- **사용 사례**: 기존 워크로드, 비용 최적화

##### io2/io1 (Provisioned IOPS SSD)
- **프로비저닝된 IOPS**: 필요한 IOPS를 미리 설정
- **io2**: 최대 64,000 IOPS, 99.999% 내구성
- **io1**: 최대 64,000 IOPS, 99.99% 내구성
- **사용 사례**: 데이터베이스, I/O 집약적 애플리케이션

#### HDD 기반 볼륨

##### st1 (Throughput Optimized HDD)
- **최적화**: 처리량 집약적 워크로드
- **기준 처리량**: 40MB/s/TB
- **버스트 처리량**: 250MB/s/TB
- **사용 사례**: 빅데이터, 로그 처리

##### sc1 (Cold HDD)
- **최저 비용**: 가장 저렴한 EBS 볼륨
- **기준 처리량**: 12MB/s/TB
- **사용 사례**: 아카이브, 백업

### EBS 기능

![EBS 주요 기능](/assets/Images/6.AWS/image%2034.png)
*EBS 볼륨의 관리 및 백업 기능*

#### 주요 기능

##### 1. 스냅샷 (Snapshots)
- **증분 백업**: 변경된 블록만 백업하여 비용 효율성
- **S3 저장**: 스냅샷은 Amazon S3에 자동 저장
- **교차 리전 복사**: 다른 리전으로 스냅샷 복사 가능
- **자동화**: AWS Backup 서비스를 통한 자동 스냅샷

##### 2. 볼륨 확장
- **온라인 확장**: 인스턴스 중지 없이 볼륨 크기 증가
- **성능 조정**: IOPS 및 처리량 실시간 조정 (일부 볼륨 유형)

##### 3. 암호화
- **저장 데이터 암호화**: AWS KMS를 통한 자동 암호화
- **전송 데이터 암호화**: 인스턴스와 EBS 간 전송 암호화
- **스냅샷 암호화**: 암호화된 볼륨의 스냅샷도 자동 암호화

##### 4. Multi-Attach (io1/io2만 지원)
- **다중 연결**: 하나의 볼륨을 여러 인스턴스에 동시 연결
- **클러스터 파일 시스템**: 고가용성 애플리케이션 구성

### Amazon S3 (Simple Storage Service)

#### S3 개요

**Amazon S3**는 데이터를 안전하게 저장하고 필요 시 언제든 액세스할 수 있는 객체 수준 스토리지를 제공합니다.

#### S3 주요 특징

1. **객체 수준 스토리지**: 무제한 확장성을 제공하여 대규모 데이터 처리에 적합
2. **높은 내구성/가용성**: 여러 가용 영역에 데이터를 복제하여 99.999999999%(11 9's) 내구성
3. **스토리지 클래스**: 데이터 접근 패턴에 따라 다양한 스토리지 클래스 선택

#### S3 주요 용도

1. **웹 애플리케이션 데이터**: 웹사이트나 애플리케이션의 이미지, 동영상 등 정적 파일
2. **데이터 백업 및 복구**: 기업 데이터의 안전한 백업과 복구 작업
3. **빅데이터 분석**: 데이터 레이크 및 분석 워크로드를 위한 대규모 데이터 저장

#### S3 스토리지 클래스

![S3 스토리지 클래스](/assets/Images/6.AWS/image%2035.png)
*S3의 다양한 스토리지 클래스와 특성*

##### 자주 액세스하는 데이터
- **S3 Standard**: 자주 액세스하는 데이터용 기본 스토리지
- **S3 Reduced Redundancy**: 덜 중요한 데이터용 (deprecated)

##### 액세스 빈도가 낮은 데이터
- **S3 Standard-IA**: 자주 액세스하지 않지만 빠른 액세스가 필요한 데이터
- **S3 One Zone-IA**: 단일 가용 영역에 저장되는 IA 스토리지

##### 아카이브 데이터
- **S3 Glacier Instant Retrieval**: 밀리초 단위 검색이 가능한 아카이브
- **S3 Glacier Flexible Retrieval**: 분 단위 검색 아카이브
- **S3 Glacier Deep Archive**: 가장 저렴한 장기 아카이브

##### 지능형 계층화
- **S3 Intelligent-Tiering**: 액세스 패턴에 따라 자동으로 스토리지 클래스 이동

#### S3 버킷 및 객체 관리

##### 버킷 (Bucket)
```
버킷 특징:
- 글로벌하게 고유한 이름 필요
- 리전별로 생성
- 무제한 객체 저장 가능
- 버전 관리 지원
```

##### 객체 (Object)
```
객체 구성:
- 키(Key): 객체를 식별하는 고유한 이름
- 값(Value): 실제 데이터 (최대 5TB)
- 메타데이터: 객체에 대한 추가 정보
- 버전 ID: 버전 관리 활성화 시 생성
```

##### S3 사용 예시

**정적 웹사이트 호스팅:**
```html
<!-- S3에서 호스팅되는 정적 웹사이트 -->
<!DOCTYPE html>
<html>
<head>
    <title>My Static Website</title>
</head>
<body>
    <h1>Welcome to my S3-hosted website!</h1>
    <img src="https://my-bucket.s3.amazonaws.com/images/logo.png" alt="Logo">
</body>
</html>
```

**데이터 백업 스크립트:**
```bash
#!/bin/bash
# 로컬 데이터를 S3에 백업
aws s3 sync /local/data/ s3://my-backup-bucket/data/ --delete

# 특정 파일을 Glacier로 이동
aws s3 cp large-archive.zip s3://my-bucket/ --storage-class GLACIER
```

---

## 학습 요약 및 실습 가이드

### 📚 핵심 학습 포인트

#### 1. 클라우드 컴퓨팅 기초
- **서비스 모델**: IaaS, PaaS, SaaS의 차이점과 책임 분담
- **배포 모델**: 클라우드, 하이브리드, 온프레미스 선택 기준
- **경제적 이점**: CapEx를 OpEx로 전환, 규모의 경제 활용

#### 2. AWS 글로벌 인프라
- **리전과 가용 영역**: 고가용성과 내결함성 설계
- **엣지 로케이션**: CDN을 통한 성능 최적화
- **인프라 선택**: 규정 준수와 지연 시간 고려

#### 3. 보안 및 액세스 관리
- **공동 책임 모델**: AWS와 고객의 보안 책임 분담
- **IAM 구성 요소**: 사용자, 그룹, 역할, 정책의 관계
- **다중 계정 전략**: Organizations를 통한 중앙 집중식 관리

#### 4. 네트워킹
- **VPC 설계**: 논리적 격리와 보안 그룹/NACL 활용
- **서브넷 구성**: 퍼블릭/프라이빗 서브넷 전략
- **게이트웨이**: 인터넷 게이트웨이와 NAT 게이트웨이 차이

#### 5. 컴퓨팅 서비스
- **EC2**: 인스턴스 유형 선택과 스케일링 전략
- **Lambda**: 서버리스 아키텍처와 이벤트 기반 처리
- **Elastic Beanstalk**: 애플리케이션 배포 자동화

#### 6. 스토리지 서비스
- **EBS vs S3**: 블록 스토리지와 객체 스토리지 용도
- **스토리지 클래스**: 비용 최적화를 위한 계층화 전략

### 🛠️ 실습 체크리스트

#### 기초 실습
- [ ] AWS 계정 생성 및 MFA 설정
- [ ] IAM 사용자 생성 및 정책 연결
- [ ] VPC 생성 및 서브넷 구성
- [ ] 보안 그룹 설정 및 네트워크 ACL 구성

#### 중급 실습
- [ ] EC2 인스턴스 생성 및 웹 서버 구성
- [ ] Lambda 함수 생성 및 S3 이벤트 연동
- [ ] EBS 볼륨 생성 및 스냅샷 백업
- [ ] S3 버킷 생성 및 정적 웹사이트 호스팅

#### 고급 실습
- [ ] Organizations 설정 및 다중 계정 관리
- [ ] CloudFront 배포 구성
- [ ] Auto Scaling 그룹 설정
- [ ] 비용 최적화 전략 구현

### 📊 비용 최적화 가이드

#### 컴퓨팅 비용 절약
1. **예약 인스턴스**: 장기 워크로드에 대해 최대 75% 할인
2. **스팟 인스턴스**: 유연한 워크로드에 대해 최대 90% 할인
3. **적절한 인스턴스 크기**: AWS Compute Optimizer 활용

#### 스토리지 비용 절약
1. **S3 Intelligent-Tiering**: 액세스 패턴에 따른 자동 최적화
2. **EBS 볼륨 최적화**: 사용하지 않는 볼륨 정리
3. **수명 주기 정책**: 오래된 데이터의 자동 아카이브

#### 네트워킹 비용 절약
1. **리전 간 전송 최소화**: 동일 리전 내 리소스 배치
2. **CloudFront 활용**: 반복적인 콘텐츠 전송 비용 절약
3. **NAT Gateway vs NAT Instance**: 용량에 따른 비용 비교

### 🔐 보안 모범 사례

#### 계정 보안
1. **루트 계정 보호**: MFA 활성화 및 사용 최소화
2. **정기적인 액세스 검토**: 불필요한 권한 제거
3. **CloudTrail 활성화**: 모든 API 호출 로깅

#### 네트워크 보안
1. **최소 권한 원칙**: 필요한 포트와 프로토콜만 허용
2. **보안 그룹 vs NACL**: 다층 보안 구성
3. **VPC Flow Logs**: 네트워크 트래픽 모니터링

#### 데이터 보안
1. **암호화**: 저장 및 전송 중 데이터 암호화
2. **키 관리**: AWS KMS를 통한 키 관리
3. **백업 전략**: 정기적인 백업 및 복구 테스트

### 🚀 다음 단계 학습 로드맵

#### 초급 → 중급
1. **데이터베이스 서비스**: RDS, DynamoDB
2. **모니터링**: CloudWatch, X-Ray
3. **자동화**: CloudFormation 기초

#### 중급 → 고급
1. **컨테이너 서비스**: ECS, EKS
2. **데브옵스**: CodePipeline, CodeDeploy
3. **고급 네트워킹**: Direct Connect, Transit Gateway

#### 전문가 레벨
1. **멀티 리전 아키텍처**: 글로벌 서비스 설계
2. **하이브리드 클라우드**: 온프레미스 연동
3. **보안 전문화**: Security Hub, GuardDuty

### 📋 자격증 준비 가이드

#### AWS Certified Cloud Practitioner
- **대상**: 클라우드 기초 이해도 검증
- **준비 기간**: 1-2개월
- **핵심 영역**: 클라우드 개념, 보안, 기술, 청구/요금

#### AWS Certified Solutions Architect - Associate
- **대상**: 솔루션 설계 역량 검증
- **준비 기간**: 3-6개월
- **핵심 영역**: 복원력 있는 아키텍처 설계, 고성능 아키텍처

#### 지속적인 학습 리소스
1. **공식 문서**: [AWS Documentation](https://docs.aws.amazon.com/)
2. **무료 교육**: [AWS Training and Certification](https://aws.amazon.com/training/)
3. **실습 환경**: [AWS Free Tier](https://aws.amazon.com/free/)
4. **커뮤니티**: AWS User Groups, re:Invent 세션

---

## 결론

이 가이드는 AWS 클라우드 서비스의 기초부터 핵심 서비스까지 포괄적으로 다루고 있습니다. 클라우드 컴퓨팅의 기본 개념부터 시작하여 실제 업무에서 활용할 수 있는 구체적인 서비스들을 체계적으로 학습할 수 있도록 구성되었습니다.

> **핵심 메시지**: AWS 클라우드 성공의 열쇠는 **적절한 서비스 선택과 보안 모범 사례 준수**, 그리고 **지속적인 비용 최적화**에 있습니다. 작은 프로젝트부터 시작하여 점진적으로 복잡한 아키텍처로 발전시켜 나가는 것이 중요합니다.

### 성공적인 AWS 도입을 위한 핵심 원칙

1. **보안 우선**: 모든 설계에서 보안을 최우선으로 고려
2. **비용 의식**: 사용량 모니터링과 정기적인 비용 검토
3. **자동화 추진**: 반복적인 작업의 자동화를 통한 효율성 향상
4. **모니터링 강화**: 성능과 보안에 대한 지속적인 모니터링
5. **지속적 학습**: 새로운 서비스와 기능에 대한 꾸준한 학습

*이 문서는 AWS에 관한 정리한 내용입니다.*